import{_ as t,c as o,o as s,j as e,a}from"./chunks/framework.CW9PQe9n.js";const b=JSON.parse('{"title":"Vue3.0 实现数据双向绑定的方法","description":"","frontmatter":{},"headers":[],"relativePath":"interview/vue/vue3实现数据双向绑定的方法.md","filePath":"interview/vue/vue3实现数据双向绑定的方法.md","lastUpdated":1722784306000}'),n={name:"interview/vue/vue3实现数据双向绑定的方法.md"},r=e("h1",{id:"vue3-0-实现数据双向绑定的方法",tabindex:"-1"},[a("Vue3.0 实现数据双向绑定的方法 "),e("a",{class:"header-anchor",href:"#vue3-0-实现数据双向绑定的方法","aria-label":'Permalink to "Vue3.0 实现数据双向绑定的方法"'},"​")],-1),_=e("p",null,"vue3.0 实现数据双向绑定是通过Proxy",-1),c=e("p",null,'Proxy是 ES6 中新增的一个特性，翻译过来意思是"代理"，用在这里表示由它来“代理”某些操作。 Proxy 让我们能够以简洁易懂的方式控制外部对对象的访问。其功能非常类似于设计模式中的代理模式。',-1),i=e("p",null,"Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。",-1),l=e("p",null,"使用 Proxy 的核心优点是可以交由它来处理一些非核心逻辑（如：读取或设置对象的某些属性前记录日志；设置对象的某些属性值前，需要验证；某些属性的访问控制等）。 从而可以让对象只需关注于核心逻辑，达到关注点分离，降低对象复杂度等目的。",-1),d=e("div",{class:"tip custom-block"},[e("p",{class:"custom-block-title"},"扩展："),e("p",null,"使用proxy实现，双向数据绑定，相比2.0的Object.defineProperty ()优势："),e("p",null,"可以劫持整个对象，并返回一个新对象且有13种劫持操作")],-1),u=[r,_,c,i,l,d];function p(v,h,m,x,f,P){return s(),o("div",null,u)}const k=t(n,[["render",p]]);export{b as __pageData,k as default};
